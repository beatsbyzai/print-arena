{"version":3,"sources":["components/ImageLayout.js","components/TextLayout.js","components/LinkLayout.js","App.js","serviceWorker.js","index.js","config.js"],"names":["ImageLayout","props","react_default","a","createElement","className","style","alt","src","url","TextLayout","react_textfit_lib_default","mode","react_markdown_default","width","source","content","LinkLayout","image","urlPropsQueryConfig","URICurrentChannel","type","UrlQueryParamTypes","string","queryParam","history","createHistory","configureUrlQuery","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getChannelData","channel","fetch","concat","config","apiBase","state","page","per","headers","Content-Type","Authorization","then","resp","json","response","console","log","contents","map","item","i","class","slug","getSubChannels","original","setState","arenaContent","makePage","catch","error","added","usedNums","pageArray","randomVal","Math","floor","random","length","indexOf","push","pageContent","front","slice","back","left","right","loaded","getRandomArbitrary","makeSpread","components_ImageLayout","id","title","generated_title","key","transform","components_TextLayout","components_LinkLayout","handleChange","event","value","target","handleSubmit","preventDefault","path","replace","split","replaceUrlQuery","ch","_this2","listen","forceUpdate","_this3","onSubmit","placeholder","onChange","onClick","e","window","print","Component","addUrlProps","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.0f2482d7.chunk.js","sourcesContent":["import React from 'react';\n\nconst ImageLayout = (props) => (\n  <div className='image' style={props.style}>\n    <img alt='' className='to-print' src={props.url}/>\n    {/* <div className='itemText'> */}\n\n    {/* <p className='imageTitle'>{props.title}</p> */}\n    {/* <a href=\"src\" className='desc'>{\"are.na/block/\" + props.id}</a> */}\n    {/* </div> */}\n  </div>\n);\n\nexport default ImageLayout\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown'\nimport Textfit from 'react-textfit';\n\nconst TextLayout = (props) => (\n  <div className='text' style={props.style} >\n    <Textfit className={\"fit\"} mode=\"multi\">\n      <ReactMarkdown style={{width: '100%'}} source={props.content} />\n    </Textfit>\n  </div>\n);\n\nexport default TextLayout\n","import React from 'react';\n\nconst LinkLayout = (props) => (\n  <div className='image' style={props.style}>\n    <img src={props.image} alt='' />\n    <div className='itemText'>\n      {/* <p className='imageTitle'>{'http://are.na/block/' + this.props.id}</p> */}\n      {/* <p className='imageTitle'>{this.props.title}</p>\n      <a href=\"src\" className='desc'>{this.props.url}</a> */}\n    </div>\n  </div>\n);\n\nexport default LinkLayout\n","import React, { Component } from 'react';\nimport config from './config'\nimport './App.css';\nimport {configureUrlQuery, addUrlProps, replaceUrlQuery, UrlQueryParamTypes } from 'react-url-query'\nimport createHistory from 'history/createBrowserHistory';\n\nimport ImageLayout from './components/ImageLayout'\nimport TextLayout from './components/TextLayout'\nimport LinkLayout from './components/LinkLayout'\n\nconst urlPropsQueryConfig = {\n  URICurrentChannel: { type: UrlQueryParamTypes.string, queryParam: 'ch' },\n}\n\nconst history = createHistory();\n \nconfigureUrlQuery({ history });\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      channel: !this.props.URICurrentChannel ? 'screen-spaces-_-print' : this.props.URICurrentChannel,\n      loaded: false,\n      value: '',\n      pageContent: {},\n      page: 1,\n      per: 100\n    }\n  }\n  \n  componentWillMount(){\n\n  }\n\n  componentDidMount(){\n    if(!this.state.loaded){\n      this.getChannelData(this.state.channel)\n    }\n    replaceUrlQuery({'ch': this.state.channel })\n    history.listen(() => this.forceUpdate());\n\n  }\n\n  getChannelData = (channel) => {\n    let getChannels = fetch(`${config.apiBase}/channels/${channel}/contents?page=${this.state.page}&per=${this.state.per}`, {headers:{'Content-Type': 'application/json', 'Authorization': 'Bearer c7af988841615059cabff98536a3670d4eefb37881631c2bfaf0ed5d7d0ba0d2'}})\n    getChannels.then(resp => resp.json()).then(response => {\n      console.log(\"Got main chan\")\n      response.contents.map((item,i) => {\n        if(item.class === \"Channel\"){\n            console.log(item.slug)\n            this.getSubChannels(item.slug)\n        } else if(item.class === \"Attachement\"){\n          console.log(item.image.original.url)\n        }\n      })\n      this.setState({arenaContent: response.contents})\n      this.makePage()\n    }).catch(error => {\n      this.getChannelData('screen-spaces-_-print')\n\n    })\n  }\n\n  getSubChannels = (channel) => {\n    let getChannels = fetch(`${config.apiBase}/channels/${channel}/contents?page=${this.state.page}&per=${this.state.per}`, {headers:{'Content-Type': 'application/json', 'Authorization': 'Bearer c7af988841615059cabff98536a3670d4eefb37881631c2bfaf0ed5d7d0ba0d2'}})\n    getChannels.then(resp => resp.json()).then(response => {\n      // console.log(response.contents)\n      let added = this.state.arenaContent.concat(response.contents)\n      this.setState({arenaContent: added})\n      // this.makePage()\n    }).catch(error => {\n      console.log('error')\n    })\n  }\n\n  makePage = () => {\n    let usedNums = []\n    let pageArray = []\n    let count = 16\n\n    for(var i =0; i < count; i++){\n      let randomVal = Math.floor(Math.random()*this.state.arenaContent.length)\n      if (usedNums.indexOf(randomVal) >= 0) {\n        console.log('exists');\n      } else {\n        console.log('does not');\n      }\n\n      pageArray[i] = this.state.arenaContent[randomVal]\n      usedNums.push(randomVal)\n    }\n\n    this.setState({pageContent: {\n      front: pageArray.slice(0, 4),\n      back: pageArray.slice(4, 8),\n      left: pageArray.slice(8, 12),\n      right: pageArray.slice(12, 16),\n    }, loaded: true})\n  }\n\n  getRandomArbitrary = () => {\n    return Math.random() * ((20) - (-20)) + (-20);\n  }\n\n  makeSpread = (item, i) =>{\n    // console.log(item)\n    switch (item.class) {\n      // case 'Channel': this.getSubChannels(item.slug) \n      //   break;\n      case 'Image': return <ImageLayout url={item.image.original.url} id={item.id} title={item.generated_title} key={i} style={{transform: `rotate3d(1, 1, 1, ${this.getRandomArbitrary()}deg)` }}/>\n      // case 'Attachment': return <ImageLayout url={item.image.original.url ? item.image.original.url : \"\"} id={item.id} title={item.generated_title} key={i} style={{transform: `rotate3d(1, 1, 1, ${this.getRandomArbitrary()}deg)` }}/>\n      case 'Text': return <TextLayout content={item.content} id={item.id} title={item.generated_title} key={i} style={{transform: `rotate3d(1, 1, 1, ${this.getRandomArbitrary()}deg)` }}/>\n      case 'Link': return <LinkLayout url={item.source.url} id={item.id} title={item.generated_title} image={item.image.original.url} key={i} style={{transform: `rotate3d(1, 1, 1, ${this.getRandomArbitrary()}deg)` }}/>\n      default: console.log('...');\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.value !== this.state.url) {\n      let strUrl = this.state.value;\n      let path = strUrl.replace(/^https?:\\/\\//, '').split('/');\n      this.setState({channel: path[2], loaded: false, arenaContent: []});\n      console.log(path[2])\n      this.getChannelData(path[2]);\n      replaceUrlQuery({'ch': path[2]})\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"controls\">\n          <form onSubmit={this.handleSubmit}>\n              <label>\n                <span className='formTitle'></span>\n                <input\n                  className='formBox'\n                  type=\"text\"\n                  placeholder={this.state.channel}\n                  value={this.state.value}\n                  onChange={this.handleChange} />\n              </label>\n              {/* <input className='formButton' type=\"submit\" value=\"Submit\" /> */}\n          </form>\n          {this.state.arenaContent ? <button onClick={(e) => this.makePage()}>Generate New Page \n            {/* <span class=\"dim\">⌘r</span> */}\n          </button> : \"Loading...\"}\n          <button class=\"print\" onClick={(e) =>  window.print()}>Print</button> \n        </div>\n        <section className=\"layout\" >\n          <section className=\"page front\">\n            {this.state.loaded ? this.state.pageContent.front.map((item,i) => this.makeSpread(item, i)) : \"Loading...\"}\n          </section>\n          <section className=\"page back\">\n            {this.state.loaded ? this.state.pageContent.back.map((item,i) => this.makeSpread(item, i)) : \"Loading...\"}\n          </section>\n        </section>\n        <section className=\"layout\" >\n          <section className=\"page front\">\n            {this.state.loaded ? this.state.pageContent.left.map((item,i) => this.makeSpread(item, i)) : \"Loading...\"}\n          </section>\n          <section className=\"page back\">\n            {this.state.loaded ? this.state.pageContent.right.map((item,i) => this.makeSpread(item, i)) : \"Loading...\"}\n          </section>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default addUrlProps({ urlPropsQueryConfig })(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n  apiBase: 'https://api.are.na/v2',\n}\n"],"sourceRoot":""}